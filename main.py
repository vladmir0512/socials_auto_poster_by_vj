import time
import requests
import json
from datetime import datetime
from config import *

class TwitchAutoPoster:
    def __init__(self):
        self.twitch_token = None
        self.last_stream_status = False
        self.last_post_time = None
        
    def get_twitch_token(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Twitch API"""
        try:
            url = "https://id.twitch.tv/oauth2/token"
            data = {
                "client_id": TWITCH_CLIENT_ID,
                "client_secret": TWITCH_CLIENT_SECRET,
                "grant_type": "client_credentials"
            }
            
            response = requests.post(url, data=data)
            if response.status_code == 200:
                self.twitch_token = response.json()["access_token"]
                print("‚úÖ –¢–æ–∫–µ–Ω Twitch –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ Twitch: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ Twitch: {e}")
            return False
    
    def check_stream_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∏–º–∞"""
        if not self.twitch_token:
            if not self.get_twitch_token():
                return False
        
        try:
            url = f"https://api.twitch.tv/helix/streams"
            headers = {
                "Client-ID": TWITCH_CLIENT_ID,
                "Authorization": f"Bearer {self.twitch_token}"
            }
            params = {
                "user_login": TWITCH_STREAMER_LOGIN
            }
            
            response = requests.get(url, headers=headers, params=params)
            
            if response.status_code == 200:
                data = response.json()
                is_live = len(data["data"]) > 0
                
                if is_live and not self.last_stream_status:
                    # –°—Ç—Ä–∏–º —Ç–æ–ª—å–∫–æ —á—Ç–æ –Ω–∞—á–∞–ª—Å—è
                    stream_info = data["data"][0]
                    self.post_to_socials(stream_info)
                    self.last_stream_status = True
                    print(f"üé• –°—Ç—Ä–∏–º –Ω–∞—á–∞–ª—Å—è: {stream_info['title']}")
                elif not is_live and self.last_stream_status:
                    # –°—Ç—Ä–∏–º –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
                    self.last_stream_status = False
                    print("üî¥ –°—Ç—Ä–∏–º –∑–∞–∫–æ–Ω—á–∏–ª—Å—è")
                
                return is_live
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∏–º–∞: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∏–º–∞: {e}")
            return False
    
    def post_to_socials(self, stream_info):
        """–ü–æ—Å—Ç–∏–Ω–≥ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏"""
        current_time = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Å—Ç–∏–ª–∏ –ª–∏ –º—ã –Ω–µ–¥–∞–≤–Ω–æ
        if (self.last_post_time and 
            (current_time - self.last_post_time).seconds < 300):  # 5 –º–∏–Ω—É—Ç
            print("‚è∞ –ü–æ—Å—Ç —É–∂–µ –±—ã–ª –Ω–µ–¥–∞–≤–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = STREAM_MESSAGE_TEMPLATE.format(
            streamer=TWITCH_STREAMER_LOGIN,
            title=stream_info["title"],
            url=f"https://twitch.tv/{TWITCH_STREAMER_LOGIN}"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
        if stream_info.get("game_name"):
            message += f"\nüéÆ –ò–≥—Ä–∞: {stream_info['game_name']}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑—Ä–∏—Ç–µ–ª–µ–π
        if stream_info.get("viewer_count"):
            message += f"\nüë• –ó—Ä–∏—Ç–µ–ª–∏: {stream_info['viewer_count']}"
        
        # –ü–æ—Å—Ç–∏–º –≤ Telegram
        self.post_to_telegram(message)
        
        # –ü–æ—Å—Ç–∏–º –≤ VK (–ø–æ–∫–∞ —Ä–∞–Ω–æ)
       # self.post_to_vk(message)
        
        self.last_post_time = current_time
        print("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤–æ –≤—Å–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏")
    
    def post_to_telegram(self, message):
        """–ü–æ—Å—Ç–∏–Ω–≥ –≤ Telegram"""
        try:
            url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
            
            # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç HTML —Ç–µ–≥–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            clean_message = message.replace('<', '&lt;').replace('>', '&gt;')
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (Telegram –ª–∏–º–∏—Ç ~4096 —Å–∏–º–≤–æ–ª–æ–≤)
            if len(clean_message) > 4000:
                clean_message = clean_message[:3997] + "..."
            
            data = {
                "chat_id": TELEGRAM_CHANNEL_ID,
                "text": clean_message,
                "parse_mode": "HTML"
            }
            
            response = requests.post(url, data=data)
            if response.status_code == 200:
                print("‚úÖ –ü–æ—Å—Ç –≤ Telegram —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
            else:
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
                error_details = response.json() if response.content else "–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π"
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤ Telegram: {response.status_code}")
                print(f"   –î–µ—Ç–∞–ª–∏: {error_details}")
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ HTML —Ä–∞–∑–º–µ—Ç–∫–∏
                if response.status_code == 400:
                    print("üîÑ –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ HTML —Ä–∞–∑–º–µ—Ç–∫–∏...")
                    data["parse_mode"] = None
                    retry_response = requests.post(url, data=data)
                    if retry_response.status_code == 200:
                        print("‚úÖ –ü–æ—Å—Ç –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–µ–∑ HTML —Ä–∞–∑–º–µ—Ç–∫–∏")
                    else:
                        print(f"‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: {retry_response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç–∏–Ω–≥–µ –≤ Telegram: {e}")
    
    def post_to_vk(self, message):
        """–ü–æ—Å—Ç–∏–Ω–≥ –≤ VK"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ VK
            if not VK_GROUP_ID or not VK_ACCESS_TOKEN:
                print("‚ö†Ô∏è VK –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return
            
            url = "https://api.vk.com/method/wall.post"
            data = {
                "owner_id": f"-{VK_GROUP_ID}",
                "message": message,
                "access_token": VK_ACCESS_TOKEN,
                "v": VK_API_VERSION
            }
            
            response = requests.post(url, data=data)
            if response.status_code == 200:
                result = response.json()
                if "response" in result:
                    print("‚úÖ –ü–æ—Å—Ç –≤ VK —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤ VK: {result}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤ VK: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç–∏–Ω–≥–µ –≤ VK: {e}")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã"""
        print("üöÄ –ó–∞–ø—É—Å–∫ Twitch AutoPoster...")
        print(f"üì∫ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞: {TWITCH_STREAMER_LOGIN}")
        print(f"üì± Telegram –∫–∞–Ω–∞–ª: {TELEGRAM_CHANNEL_ID}")
        #print(f"üåê VK –≥—Ä—É–ø–ø–∞: {VK_GROUP_ID if VK_GROUP_ID else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'}")
        print("=" * 50)
        
        while True:
            try:
                self.check_stream_status()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
            except KeyboardInterrupt:
                print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
                break
            except Exception as e:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                time.sleep(60)

if __name__ == "__main__":
    poster = TwitchAutoPoster()
    poster.run()