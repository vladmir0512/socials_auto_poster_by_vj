#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Twitch AutoPoster —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""

import time
import logging
from datetime import datetime
from main import TwitchAutoPoster

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('autoposter.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class MonitoredAutoPoster(TwitchAutoPoster):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è AutoPoster —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    def __init__(self):
        super().__init__()
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Twitch AutoPoster —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º")
    
    def get_twitch_token(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        logger.info("üîë –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ Twitch...")
        result = super().get_twitch_token()
        if result:
            logger.info("‚úÖ –¢–æ–∫–µ–Ω Twitch –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω Twitch")
        return result
    
    def check_stream_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∏–º–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        logger.debug("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∏–º–∞...")
        result = super().check_stream_status()
        return result
    
    def post_to_socials(self, stream_info):
        """–ü–æ—Å—Ç–∏–Ω–≥ –≤ —Å–æ—Ü—Å–µ—Ç–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        logger.info(f"üìù –ü–æ—Å—Ç–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∏–º–µ: {stream_info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        super().post_to_socials(stream_info)
    
    def post_to_telegram(self, message):
        """–ü–æ—Å—Ç–∏–Ω–≥ –≤ Telegram —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        logger.info("üì± –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –≤ Telegram...")
        super().post_to_telegram(message)
    
    def post_to_vk(self, message):
        """–ü–æ—Å—Ç–∏–Ω–≥ –≤ VK —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        logger.info("üåê –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –≤ VK...")
        super().post_to_vk(message)
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Twitch AutoPoster —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º...")
        logger.info(f"üì∫ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞: {TWITCH_STREAMER_LOGIN}")
        logger.info(f"üì± Telegram –∫–∞–Ω–∞–ª: {TELEGRAM_CHANNEL_ID}")
        logger.info(f"üåê VK –≥—Ä—É–ø–ø–∞: {VK_GROUP_ID if VK_GROUP_ID else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'}")
        logger.info("=" * 50)
        
        start_time = datetime.now()
        check_count = 0
        
        while True:
            try:
                check_count += 1
                current_time = datetime.now()
                uptime = current_time - start_time
                
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ #{check_count} (Uptime: {uptime})")
                
                self.check_stream_status()
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 10 –ø—Ä–æ–≤–µ—Ä–æ–∫
                if check_count % 10 == 0:
                    logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {check_count} –ø—Ä–æ–≤–µ—Ä–æ–∫, Uptime: {uptime}")
                
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
            except KeyboardInterrupt:
                logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
                break
            except Exception as e:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
                time.sleep(60)
        
        logger.info(f"üèÅ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {check_count}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        poster = MonitoredAutoPoster()
        poster.run()
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        raise

if __name__ == "__main__":
    main()
