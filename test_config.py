#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Twitch AutoPoster
"""

import os
import requests
from dotenv import load_dotenv

def test_twitch_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Twitch API"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Twitch API...")
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        url = "https://id.twitch.tv/oauth2/token"
        data = {
            "client_id": os.getenv('TWITCH_CLIENT_ID'),
            "client_secret": os.getenv('TWITCH_CLIENT_SECRET'),
            "grant_type": "client_credentials"
        }
        
        response = requests.post(url, data=data)
        if response.status_code == 200:
            token = response.json()["access_token"]
            print("‚úÖ –¢–æ–∫–µ–Ω Twitch –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
            api_url = "https://api.twitch.tv/helix/users"
            headers = {
                "Client-ID": os.getenv('TWITCH_CLIENT_ID'),
                "Authorization": f"Bearer {token}"
            }
            params = {"login": os.getenv('TWITCH_STREAMER_LOGIN')}
            
            api_response = requests.get(api_url, headers=headers, params=params)
            if api_response.status_code == 200:
                user_data = api_response.json()
                if user_data["data"]:
                    user = user_data["data"][0]
                    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user['display_name']} (ID: {user['id']})")
                    return True
                else:
                    print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {api_response.status_code}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_telegram_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API"""
    print("\nüì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram API...")
    
    try:
        token = os.getenv('TELEGRAM_BOT_TOKEN')
        chat_id = os.getenv('TELEGRAM_CHANNEL_ID')
        
        if not token or not chat_id:
            print("‚ö†Ô∏è Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
        url = f"https://api.telegram.org/bot{token}/getMe"
        response = requests.get(url)
        
        if response.status_code == 200:
            bot_info = response.json()
            if bot_info["ok"]:
                print(f"‚úÖ –ë–æ—Ç –Ω–∞–π–¥–µ–Ω: @{bot_info['result']['username']}")
                
                # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                test_url = f"https://api.telegram.org/bot{token}/sendMessage"
                test_data = {
                    "chat_id": chat_id,
                    "text": "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Twitch AutoPoster",
                    "parse_mode": "HTML"
                }
                
                test_response = requests.post(test_url, data=test_data)
                if test_response.status_code == 200:
                    print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {test_response.status_code}")
                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
                    try:
                        error_details = test_response.json()
                        print(f"   –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_details}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
                        if "description" in error_details:
                            if "chat not found" in error_details["description"].lower():
                                print("   üí° –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π chat_id –∏–ª–∏ –±–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª")
                            elif "bot was blocked" in error_details["description"].lower():
                                print("   üí° –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                            elif "chat_id" in error_details["description"].lower():
                                print("   üí° –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id")
                    except:
                        print("   –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏")
                    return False
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_vk_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VK API"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VK API...")
    
    try:
        group_id = os.getenv('VK_GROUP_ID')
        token = os.getenv('VK_ACCESS_TOKEN')
        
        if not group_id or not token:
            print("‚ö†Ô∏è VK –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
        url = "https://api.vk.com/method/groups.getById"
        data = {
            "group_id": group_id,
            "access_token": token,
            "v": os.getenv('VK_API_VERSION', '5.131')
        }
        
        response = requests.get(url, params=data)
        if response.status_code == 200:
            result = response.json()
            if "response" in result:
                group_info = result["response"][0]
                print(f"‚úÖ –ì—Ä—É–ø–ø–∞ –Ω–∞–π–¥–µ–Ω–∞: {group_info['name']}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {result}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Twitch AutoPoster")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    required_vars = [
        'TWITCH_CLIENT_ID',
        'TWITCH_CLIENT_SECRET', 
        'TWITCH_STREAMER_LOGIN',
        'TELEGRAM_BOT_TOKEN',
        'TELEGRAM_CHANNEL_ID'
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        for var in missing_vars:
            print(f"   - {var}")
        print("\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ env_example.txt –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return
    
    print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    twitch_ok = test_twitch_api()
    telegram_ok = test_telegram_api()
    vk_ok = test_vk_api()
    
    print("\n" + "=" * 50)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   Twitch: {'‚úÖ' if twitch_ok else '‚ùå'}")
    print(f"   Telegram: {'‚úÖ' if telegram_ok else '‚ùå'}")
    print(f"   VK: {'‚úÖ' if vk_ok else '‚ùå'}")
    
    if twitch_ok and telegram_ok:
        print("\nüéâ –û—Å–Ω–æ–≤–Ω—ã–µ API —Ä–∞–±–æ—Ç–∞—é—Ç! –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å main.py")
    else:
        print("\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")

if __name__ == "__main__":
    main()
